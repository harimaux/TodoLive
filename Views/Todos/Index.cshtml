@model TodoLive.Models.MainVM



<div class="taskMenu">

    <div class="userTasksLeftMenu">

        <div class="addTodoBtn">
            <span class="material-symbols-outlined">
                note_add
            </span>
            <div>
                Add Task
            </div>
        </div>

        <div class="userTaskLeftMenuContent">

            <ul>
                <li><a asp-area="" asp-controller="Todos" asp-action="Index">Active Tasks</a></li>
                <li class="menuLeftShowPriority">Priority

                    <span class="priorityBtnsBox">
                        <span class="priorityColseBtnBox">
                            <span class="material-symbols-outlined priorityColseBtn">
                                close
                            </span>
                        </span>
                        <span class="menuLeftShowUrgent">Urgent</span>
                        <span class="menuLeftShowImportant">Important</span>
                        <span class="menuLeftShowMedium">Medium</span>
                        <span class="menuLeftShowLow">Low</span>
                    </span>
                </li>
                <li class="menuLeftShowOverdue">Overdue</li>
                <li class="menuLeftShowCompleted">Completed</li>
            </ul>

        </div>

        <div class="userTaskLeftAiContent">
            <div class="userTaskLeftChatBox">

            </div>
        </div>

    </div>


    @*USER TASKS*@
    <div class="userTasksMain">

        @*CONTENT*@

        <div class="userTasksContent">

@*             <div class="userTasksCard">

                <partial name="_Task" />

            </div> *@

            <div class="userTasksCard">
                @await Html.PartialAsync("_Task")
            </div>


        </div>

    </div>
</div>


@*ADD TASK MODAL*@
<div class="modal fade addTaskModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-dark" id="exampleModalLabel">Create Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="POST" asp-action="CreateTask" class="createTaskForm">
                <div class="addTaskFormContent">

                    <div class="customInputLabelBox1">
                        <input type="text" name="Title" class="customInput1" maxlength="60" />
                        <label for="Title" id="labelTitle" base-value="Title" class="customLabel1">Title</label>
                    </div>

                    <div class="customInputLabelBox1">
                        <textarea name="Content" class="customInput1 customTextbox1" maxlength="2000"></textarea>
                        <label for="Content" id="labelContent" base-value="Description" class="customLabel1">Description</label>
                    </div>

                    <hr>

                    <div class="customInputLabelBox1">
                        <input name="FromRequested" class="customInput1" maxlength="60">
                        <label for="FromRequested" id="labelFrom" base-value="From" class="customLabel1">From</label>
                    </div>

                    <div class="customInputLabelBox1">
                        <select name="Priority" class="customInput1">
                            <option></option>
                            @foreach (var item in Model.TaskPriorityList)
                            {
                                <option value="@item.PriorityName" data-color="@item.PriorityVisual"> @Html.Raw(item.HTMLcode) @item.PriorityName</option>
                            }
                        </select>
                        <label for="Priority" id="labelPriority" base-value="Priority" class="customLabel1">Priority</label>
                    </div>

                    <div class="customInputLabelBox1">
                        <input type="date" name="DateDue" value="@DateTime.Now.ToString("yyyy-MM-dd")" class="customInput1">
                        <label for="DateDue" id="labelDueDate" class="customLabel1 calendarInput" base-value="Date Due">Date Due</label>
                    </div>

                </div>

                <div class="modal-footer d-flex justify-content-between">
                    <img src="~/Images/Logos/logoHarimauxShadow.png" style="width: 40px" />
                    <button type="submit" class="btn btn-outline-success">Add Task</button>
                </div>

            </form>
        </div>
    </div>
</div>

@section Scripts{

    <script>

        $('footer').hide();

        $(document).ready(function () {

            //SHOW ADD TASK MODAL
            $('.addTodoBtn').on('click', function () {
                $('.addTaskModal').modal("show");
            });

            //ANIMATED LABELS IN 'ADD TASK' MODAL > FORM
            let customInput1 = document.querySelectorAll('.customInputLabelBox1 input, .customInputLabelBox1 textarea, .customInputLabelBox1 select');

            //MOVES LABELS IF THERE IS VALUE IN INPUT BOX

            //INITIAL VALUE CHECK
            customInput1.forEach(input => {

                if (input.value != '') {

                    input.nextElementSibling.classList.add('inputHasValue');

                };
            });


            //CALENDAR WILL ALWAYS HAVE LABEL SET AT TOP (DESIGN IMPLICATIONS)
            let calendarInput = document.querySelector('.calendarInput');
            calendarInput.classList.add('inputHasValue');

            //CHECK WHILE TYPIING
            $(function () {
                $(customInput1).focus(function () {
                    selectedInput = this;

                }).blur(function (e) {

                    if (selectedInput.value != "") {
                        e.target.nextElementSibling.classList.add('inputHasValue');
                    } else {
                        e.target.nextElementSibling.classList.remove('inputHasValue');
                        calendarInput.classList.add('inputHasValue');
                    }

                    selectedInput = null;

                });
            });



            //SAVE TASK FORM
            var form = document.querySelector('.createTaskForm');
            form.onsubmit = async function (e) {

                e.preventDefault();

                //INPUT VALUES
                const taskTitle = document.querySelector('input[name=Title]').value;
                const taskFromRequested = document.querySelector('input[name=FromRequested]').value;
                const taskDateDue = document.querySelector('input[name=DateDue]').value;

                //TEXTAREA VALUES
                const taskContent = document.querySelector('textarea[name=Content]').value;

                //SELECT VALUES
                const taskPriority = document.querySelector('select[name=Priority]').value;

                // LABELS ELEMENTS
                const labelTitle = document.querySelector('#labelTitle');
                const labelContent = document.querySelector('#labelContent');
                const labelFrom = document.querySelector('#labelFrom');
                const labelPriority = document.querySelector('#labelPriority');
                const labelDueDate = document.querySelector('#labelDueDate');

                //FROM VALIDATION
                let isValidated = true;

                function validateForm(inputValue, errorMessage, label) {

                    if (inputValue == "" || inputValue == null) {

                        isValidated = false;

                        label.innerHTML = errorMessage;
                        label.classList.add('inputHasValue');
                        label.style.color = "red";

                    } else {

                        switch (label.getAttribute('id')) {
                            case 'labelTitle':
                                getValueSetStyle()
                            case 'labelContent':
                                getValueSetStyle()
                            case 'labelFrom':
                                getValueSetStyle()
                            case 'labelPriority':
                                getValueSetStyle()
                            case 'labelDueDate':
                                getValueSetStyle()
                        }

                        function getValueSetStyle() {
                            label.innerHTML = label.getAttribute('base-value');
                            label.style.color = "#808080ff";
                        }
                    };
                };

                //DEFAULT LABEL VALUES
                validateForm(taskTitle, "Enter title", labelTitle);
                validateForm(taskContent, "Enter task description", labelContent);
                validateForm(taskFromRequested, "Enter from", labelFrom);
                validateForm(taskPriority, "Set priority", labelPriority);
                validateForm(taskDateDue, "Set due date", labelDueDate);

                if (isValidated == false) {
                    return false;
                }


                //SET NEW TASK
                let formModel = new FormData();

                formModel.append('Title', taskTitle);
                formModel.append('Content', taskContent);
                formModel.append('FromRequested', taskFromRequested);
                formModel.append('Priority', taskPriority);
                formModel.append('DateDue', taskDateDue);

                $.ajax({
                    url: '@Url.Action("CreateTask", "Todos")',
                    type: 'POST',
                    data: formModel,
                    processData: false,
                    contentType: false,
                    success: function (data) {

                        //RESETS THE FORM AND LABELS + HIDE
                        form.reset();
                        customInput1.forEach(input => {

                            input.nextElementSibling.classList.remove('inputHasValue');

                        });
                        calendarInput.classList.add('inputHasValue');
                        $('.addTaskModal').modal("hide");

                        //SHOWS NEWLY ADDED TASK
                        $('.userTasksCard').prepend(data);
                        let addedCard = document.querySelector('.userTasksCard').firstElementChild;
                        $(addedCard).effect("shake");

                        getAiHelp();

                    },
                    error: function (xhr, status, error) {
                        var errorMessage = xhr.responseText || 'An error occurred.';
                        alert('Error: ' + errorMessage);
                    }
                });
            };




            //DELETE, EDIT, COMPLETE TASK
            const cardBtns = document.querySelector('.userTasksCard');

            cardBtns.addEventListener('click', function (e) {

                if (e.target.matches('.cardFooterShowConfirmBoxBtn')) {

                    //Hides all confirm boxes
                    let cardFooterConfirmBox = document.querySelectorAll('.cardFooterConfirmBox');
                    cardFooterConfirmBox.forEach(item => {

                        item.classList.remove('cardFooterConfirmBoxShow');
                    });

                    //removes stle from all Li elements - background color
                    let cardFooterBtsWithConfirm = document.querySelectorAll('.cardFooterBtsWithConfirm');
                    cardFooterBtsWithConfirm.forEach(item => {

                        item.style.backgroundColor = "unset";
                    });

                    //Shows confirm box
                    let confirmBox = e.target.previousElementSibling;
                    confirmBox.classList.add('cardFooterConfirmBoxShow');

                    let cardFooterLiElement = e.target;
                    cardFooterLiElement.parentNode.style.backgroundColor = "#B1B0B1";

                    //removes style of all buttons + add back hover
                    let cardFooterShowConfirmBoxBtn = document.querySelectorAll('.cardFooterShowConfirmBoxBtn');
                    cardFooterShowConfirmBoxBtn.forEach(item => {

                        item.classList.add('cardFooterButtonsHover');
                        item.style.color = "#F2F2F2";
                    });

                    //changes style of called button
                    e.target.style.color = "#050505";
                    e.target.style.opacity = ".7";
                    e.target.classList.remove('cardFooterButtonsHover');

                    //Close confirm box btn
                    let allCloseBtns = document.querySelectorAll('.cardFooterCancelConfirmBox');
                    allCloseBtns.forEach(item => {

                        item.addEventListener('click', (ev) => {

                            item.parentElement.parentElement.nextElementSibling.classList.add('cardFooterButtonsHover')
                            item.parentElement.parentElement.classList.remove('cardFooterConfirmBoxShow');
                            item.parentElement.parentElement.parentElement.style.backgroundColor = "unset";
                            e.target.style.color = "#F2F2F2";
                            e.target.style.opacity = "1";
                        });
                    });

                    //Remove task
                    let cardId = e.target.getAttribute('cardId');
                    let cardBox = e.target.closest('.customCard');

                    let removeBtn = cardBox.getElementsByClassName('cardFooterDeleteTaskBtn')[0];

                    removeBtn.addEventListener('click', () => {

                        $.post('@Url.Action("DeleteTask", "Todos")', { cardId: cardId }, function () {

                            $(cardBox).hide("puff", function () {
                                $(cardBox).remove();
                            });

                        });
                    });

                    //Mark task as complete
                    let completeTaskBtn = cardBox.getElementsByClassName('cardFooterMarkTaskAsCompleteBtn')[0];

                    completeTaskBtn.addEventListener('click', () => {

                        $.post('@Url.Action("MarkTaskAsComplete", "Todos")', { cardId: cardId }, function () {

                            $(cardBox).hide("puff", function () {
                                $(cardBox).remove();
                            });

                        });
                    });


                };
            });



            //ADD UNDERLINE TO A LINK







            const userTasksLeftMenu = document.querySelector('.userTasksLeftMenu');
            userTasksLeftMenu.addEventListener('click', function (e) {

                //TASK SORTING - LEFT MENU
                if (e.target.matches('.menuLeftShowCompleted, .menuLeftShowLow, .menuLeftShowOverdue, .menuLeftShowUrgent, .menuLeftShowImportant, .menuLeftShowMedium, .menuLeftShowLow')) {

                    let selectedTasksName = e.target.innerText;

                    $.post('@Url.Action("ShowSelectedTasks", "Todos")', { id : selectedTasksName }, function (data) {

                        $('.userTasksCard').html(data);

                        getAiHelp();
                    });

                };


                //USER TASKS - LEFT MENU
                if (e.target.matches('.menuLeftShowPriority, .priorityColseBtn')) {

                    const priorityBtnsBox = document.querySelector('.priorityBtnsBox');
                    priorityBtnsBox.classList.toggle('priorityBtnsBoxShow');

                }

            });




            //AI TASK SUPPORT

            let getAiHelp = () => {

                let allAiHelpBtns = document.querySelectorAll('.cardFooterLeftBtnsAiHelp');
                allAiHelpBtns.forEach(btn => {

                    btn.addEventListener('click', (e) => {

                        //console.log(e.target.closest('div > .customCardContent'));
                        //console.log($(e.target).parents()[3]);

                        let cardParent = $(e.target).parents()[3];
                        let cardContent = $(cardParent).find('.customCardContent > p')[0];

                        let cardContentValue = cardContent.innerHTML;
                        let cardId = e.target.parentElement.getAttribute('cardId');

                        $.post('@Url.Action("GPTsolveTask", "Todos")', { id: cardId, value: cardContentValue }, function (data) {

                        });

                    });
                });

            };

            getAiHelp();







        });


    </script>

}